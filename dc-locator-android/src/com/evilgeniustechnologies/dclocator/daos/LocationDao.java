package com.evilgeniustechnologies.dclocator.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCATION.
*/
public class LocationDao extends AbstractDao<Location, String> {

    public static final String TABLENAME = "LOCATION";

    /**
     * Properties of entity Location.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(1, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Country = new Property(3, String.class, "country", false, "COUNTRY");
        public final static Property DepartureDate = new Property(4, java.util.Date.class, "departureDate", false, "DEPARTURE_DATE");
        public final static Property FullAddress = new Property(5, String.class, "fullAddress", false, "FULL_ADDRESS");
        public final static Property IsPublic = new Property(6, Boolean.class, "isPublic", false, "IS_PUBLIC");
        public final static Property State = new Property(7, String.class, "state", false, "STATE");
        public final static Property CheckInLocationLatitude = new Property(8, Double.class, "checkInLocationLatitude", false, "CHECK_IN_LOCATION_LATITUDE");
        public final static Property CheckInLocationLongitude = new Property(9, Double.class, "checkInLocationLongitude", false, "CHECK_IN_LOCATION_LONGITUDE");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
    };

    private DaoSession daoSession;


    public LocationDao(DaoConfig config) {
        super(config);
    }
    
    public LocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATION' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 1: updatedAt
                "'CITY' TEXT," + // 2: city
                "'COUNTRY' TEXT," + // 3: country
                "'DEPARTURE_DATE' INTEGER," + // 4: departureDate
                "'FULL_ADDRESS' TEXT," + // 5: fullAddress
                "'IS_PUBLIC' INTEGER," + // 6: isPublic
                "'STATE' TEXT," + // 7: state
                "'CHECK_IN_LOCATION_LATITUDE' REAL," + // 8: checkInLocationLatitude
                "'CHECK_IN_LOCATION_LONGITUDE' REAL," + // 9: checkInLocationLongitude
                "'USER_ID' TEXT);"); // 10: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Location entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindLong(2, entity.getUpdatedAt().getTime());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(4, country);
        }
 
        java.util.Date departureDate = entity.getDepartureDate();
        if (departureDate != null) {
            stmt.bindLong(5, departureDate.getTime());
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(6, fullAddress);
        }
 
        Boolean isPublic = entity.getIsPublic();
        if (isPublic != null) {
            stmt.bindLong(7, isPublic ? 1l: 0l);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
 
        Double checkInLocationLatitude = entity.getCheckInLocationLatitude();
        if (checkInLocationLatitude != null) {
            stmt.bindDouble(9, checkInLocationLatitude);
        }
 
        Double checkInLocationLongitude = entity.getCheckInLocationLongitude();
        if (checkInLocationLongitude != null) {
            stmt.bindDouble(10, checkInLocationLongitude);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
    }

    @Override
    protected void attachEntity(Location entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Location readEntity(Cursor cursor, int offset) {
        Location entity = new Location( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            new java.util.Date(cursor.getLong(offset + 1)), // updatedAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // country
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // departureDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fullAddress
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isPublic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // state
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // checkInLocationLatitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // checkInLocationLongitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Location entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountry(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartureDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setFullAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsPublic(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCheckInLocationLatitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setCheckInLocationLongitude(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Location entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Location entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMemberDao().getAllColumns());
            builder.append(" FROM LOCATION T");
            builder.append(" LEFT JOIN MEMBER T0 ON T.'USER_ID'=T0.'OBJECT_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Location loadCurrentDeep(Cursor cursor, boolean lock) {
        Location entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Member user = loadCurrentOther(daoSession.getMemberDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Location loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Location> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Location> list = new ArrayList<Location>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Location> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Location> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
