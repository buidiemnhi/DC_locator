package com.evilgeniustechnologies.dclocator.daos;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table READ_CONNECTION.
 */
public class ReadConnection {

    private Long id;
    private String readMessageId;
    private String readUserId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ReadConnectionDao myDao;

    private Message readMessage;
    private String readMessage__resolvedKey;

    private Member readUser;
    private String readUser__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ReadConnection() {
    }

    public ReadConnection(Long id) {
        this.id = id;
    }

    public ReadConnection(Long id, String readMessageId, String readUserId) {
        this.id = id;
        this.readMessageId = readMessageId;
        this.readUserId = readUserId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getReadConnectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getReadMessageId() {
        return readMessageId;
    }

    public void setReadMessageId(String readMessageId) {
        this.readMessageId = readMessageId;
    }

    public String getReadUserId() {
        return readUserId;
    }

    public void setReadUserId(String readUserId) {
        this.readUserId = readUserId;
    }

    /** To-one relationship, resolved on first access. */
    public Message getReadMessage() {
        String __key = this.readMessageId;
        if (readMessage__resolvedKey == null || readMessage__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            Message readMessageNew = targetDao.load(__key);
            synchronized (this) {
                readMessage = readMessageNew;
            	readMessage__resolvedKey = __key;
            }
        }
        return readMessage;
    }

    public void setReadMessage(Message readMessage) {
        synchronized (this) {
            this.readMessage = readMessage;
            readMessageId = readMessage == null ? null : readMessage.getObjectId();
            readMessage__resolvedKey = readMessageId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Member getReadUser() {
        String __key = this.readUserId;
        if (readUser__resolvedKey == null || readUser__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            Member readUserNew = targetDao.load(__key);
            synchronized (this) {
                readUser = readUserNew;
            	readUser__resolvedKey = __key;
            }
        }
        return readUser;
    }

    public void setReadUser(Member readUser) {
        synchronized (this) {
            this.readUser = readUser;
            readUserId = readUser == null ? null : readUser.getObjectId();
            readUser__resolvedKey = readUserId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String toString() {
        return "ReadConnection{" + '\n' +
                "id=" + id + '\n' +
                ", readMessageId='" + readMessageId + '\'' + '\n' +
                ", readUserId='" + readUserId + '\'' + '\n' +
                ", readMessage__resolvedKey='" + readMessage__resolvedKey + '\'' + '\n' +
                ", readUser__resolvedKey='" + readUser__resolvedKey + '\'' + '\n' +
                '}';
    }
    // KEEP METHODS END

}
