package com.evilgeniustechnologies.dclocator.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table METADATA.
*/
public class MetadataDao extends AbstractDao<Metadata, Long> {

    public static final String TABLENAME = "METADATA";

    /**
     * Properties of entity Metadata.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TempLocationDate = new Property(1, java.util.Date.class, "tempLocationDate", false, "TEMP_LOCATION_DATE");
        public final static Property LatestLocationDate = new Property(2, java.util.Date.class, "latestLocationDate", false, "LATEST_LOCATION_DATE");
        public final static Property TempMemberDate = new Property(3, java.util.Date.class, "tempMemberDate", false, "TEMP_MEMBER_DATE");
        public final static Property LatestMemberDate = new Property(4, java.util.Date.class, "latestMemberDate", false, "LATEST_MEMBER_DATE");
    };


    public MetadataDao(DaoConfig config) {
        super(config);
    }
    
    public MetadataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'METADATA' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TEMP_LOCATION_DATE' INTEGER," + // 1: tempLocationDate
                "'LATEST_LOCATION_DATE' INTEGER," + // 2: latestLocationDate
                "'TEMP_MEMBER_DATE' INTEGER," + // 3: tempMemberDate
                "'LATEST_MEMBER_DATE' INTEGER);"); // 4: latestMemberDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'METADATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Metadata entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date tempLocationDate = entity.getTempLocationDate();
        if (tempLocationDate != null) {
            stmt.bindLong(2, tempLocationDate.getTime());
        }
 
        java.util.Date latestLocationDate = entity.getLatestLocationDate();
        if (latestLocationDate != null) {
            stmt.bindLong(3, latestLocationDate.getTime());
        }
 
        java.util.Date tempMemberDate = entity.getTempMemberDate();
        if (tempMemberDate != null) {
            stmt.bindLong(4, tempMemberDate.getTime());
        }
 
        java.util.Date latestMemberDate = entity.getLatestMemberDate();
        if (latestMemberDate != null) {
            stmt.bindLong(5, latestMemberDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Metadata readEntity(Cursor cursor, int offset) {
        Metadata entity = new Metadata( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // tempLocationDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // latestLocationDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // tempMemberDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // latestMemberDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Metadata entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTempLocationDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setLatestLocationDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTempMemberDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setLatestMemberDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Metadata entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Metadata entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
