package com.evilgeniustechnologies.dclocator.daos;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig locationDaoConfig;
    private final DaoConfig memberDaoConfig;
    private final DaoConfig messageDaoConfig;
    private final DaoConfig likedConnectionDaoConfig;
    private final DaoConfig readConnectionDaoConfig;
    private final DaoConfig messageGroupDaoConfig;
    private final DaoConfig entityConnectionDaoConfig;
    private final DaoConfig metadataDaoConfig;

    private final LocationDao locationDao;
    private final MemberDao memberDao;
    private final MessageDao messageDao;
    private final LikedConnectionDao likedConnectionDao;
    private final ReadConnectionDao readConnectionDao;
    private final MessageGroupDao messageGroupDao;
    private final EntityConnectionDao entityConnectionDao;
    private final MetadataDao metadataDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        locationDaoConfig = daoConfigMap.get(LocationDao.class).clone();
        locationDaoConfig.initIdentityScope(type);

        memberDaoConfig = daoConfigMap.get(MemberDao.class).clone();
        memberDaoConfig.initIdentityScope(type);

        messageDaoConfig = daoConfigMap.get(MessageDao.class).clone();
        messageDaoConfig.initIdentityScope(type);

        likedConnectionDaoConfig = daoConfigMap.get(LikedConnectionDao.class).clone();
        likedConnectionDaoConfig.initIdentityScope(type);

        readConnectionDaoConfig = daoConfigMap.get(ReadConnectionDao.class).clone();
        readConnectionDaoConfig.initIdentityScope(type);

        messageGroupDaoConfig = daoConfigMap.get(MessageGroupDao.class).clone();
        messageGroupDaoConfig.initIdentityScope(type);

        entityConnectionDaoConfig = daoConfigMap.get(EntityConnectionDao.class).clone();
        entityConnectionDaoConfig.initIdentityScope(type);

        metadataDaoConfig = daoConfigMap.get(MetadataDao.class).clone();
        metadataDaoConfig.initIdentityScope(type);

        locationDao = new LocationDao(locationDaoConfig, this);
        memberDao = new MemberDao(memberDaoConfig, this);
        messageDao = new MessageDao(messageDaoConfig, this);
        likedConnectionDao = new LikedConnectionDao(likedConnectionDaoConfig, this);
        readConnectionDao = new ReadConnectionDao(readConnectionDaoConfig, this);
        messageGroupDao = new MessageGroupDao(messageGroupDaoConfig, this);
        entityConnectionDao = new EntityConnectionDao(entityConnectionDaoConfig, this);
        metadataDao = new MetadataDao(metadataDaoConfig, this);

        registerDao(Location.class, locationDao);
        registerDao(Member.class, memberDao);
        registerDao(Message.class, messageDao);
        registerDao(LikedConnection.class, likedConnectionDao);
        registerDao(ReadConnection.class, readConnectionDao);
        registerDao(MessageGroup.class, messageGroupDao);
        registerDao(EntityConnection.class, entityConnectionDao);
        registerDao(Metadata.class, metadataDao);
    }
    
    public void clear() {
        locationDaoConfig.getIdentityScope().clear();
        memberDaoConfig.getIdentityScope().clear();
        messageDaoConfig.getIdentityScope().clear();
        likedConnectionDaoConfig.getIdentityScope().clear();
        readConnectionDaoConfig.getIdentityScope().clear();
        messageGroupDaoConfig.getIdentityScope().clear();
        entityConnectionDaoConfig.getIdentityScope().clear();
        metadataDaoConfig.getIdentityScope().clear();
    }

    public LocationDao getLocationDao() {
        return locationDao;
    }

    public MemberDao getMemberDao() {
        return memberDao;
    }

    public MessageDao getMessageDao() {
        return messageDao;
    }

    public LikedConnectionDao getLikedConnectionDao() {
        return likedConnectionDao;
    }

    public ReadConnectionDao getReadConnectionDao() {
        return readConnectionDao;
    }

    public MessageGroupDao getMessageGroupDao() {
        return messageGroupDao;
    }

    public EntityConnectionDao getEntityConnectionDao() {
        return entityConnectionDao;
    }

    public MetadataDao getMetadataDao() {
        return metadataDao;
    }

}
