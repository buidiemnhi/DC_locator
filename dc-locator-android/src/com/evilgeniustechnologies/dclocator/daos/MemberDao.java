package com.evilgeniustechnologies.dclocator.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMBER.
*/
public class MemberDao extends AbstractDao<Member, String> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(1, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property Available = new Property(2, Boolean.class, "available", false, "AVAILABLE");
        public final static Property Avatar = new Property(3, String.class, "avatar", false, "AVATAR");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property Country = new Property(5, String.class, "country", false, "COUNTRY");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Expertise = new Property(7, String.class, "expertise", false, "EXPERTISE");
        public final static Property FirstName = new Property(8, String.class, "firstName", false, "FIRST_NAME");
        public final static Property FullName = new Property(9, String.class, "fullName", false, "FULL_NAME");
        public final static Property LoginEmail = new Property(10, String.class, "loginEmail", false, "LOGIN_EMAIL");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
        public final static Property ProfileURL = new Property(12, String.class, "profileURL", false, "PROFILE_URL");
        public final static Property Skill = new Property(13, String.class, "skill", false, "SKILL");
        public final static Property SkypeId = new Property(14, String.class, "skypeId", false, "SKYPE_ID");
        public final static Property Twitter = new Property(15, String.class, "twitter", false, "TWITTER");
        public final static Property Website = new Property(16, String.class, "website", false, "WEBSITE");
        public final static Property HomeLocationLatitude = new Property(17, Double.class, "homeLocationLatitude", false, "HOME_LOCATION_LATITUDE");
        public final static Property HomeLocationLongitude = new Property(18, Double.class, "homeLocationLongitude", false, "HOME_LOCATION_LONGITUDE");
        public final static Property LastLocationLatitude = new Property(19, Double.class, "lastLocationLatitude", false, "LAST_LOCATION_LATITUDE");
        public final static Property LastLocationLongitude = new Property(20, Double.class, "lastLocationLongitude", false, "LAST_LOCATION_LONGITUDE");
        public final static Property TempGroupDate = new Property(21, java.util.Date.class, "tempGroupDate", false, "TEMP_GROUP_DATE");
        public final static Property LatestGroupDate = new Property(22, java.util.Date.class, "latestGroupDate", false, "LATEST_GROUP_DATE");
        public final static Property TotalUnreadMessages = new Property(23, Integer.class, "totalUnreadMessages", false, "TOTAL_UNREAD_MESSAGES");
        public final static Property LatestUnreadMessagesDate = new Property(24, java.util.Date.class, "latestUnreadMessagesDate", false, "LATEST_UNREAD_MESSAGES_DATE");
        public final static Property HomeCheckInId = new Property(25, String.class, "homeCheckInId", false, "HOME_CHECK_IN_ID");
        public final static Property LastCheckInId = new Property(26, String.class, "lastCheckInId", false, "LAST_CHECK_IN_ID");
    };

    private DaoSession daoSession;


    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMBER' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 1: updatedAt
                "'AVAILABLE' INTEGER," + // 2: available
                "'AVATAR' TEXT," + // 3: avatar
                "'CITY' TEXT," + // 4: city
                "'COUNTRY' TEXT," + // 5: country
                "'EMAIL' TEXT," + // 6: email
                "'EXPERTISE' TEXT," + // 7: expertise
                "'FIRST_NAME' TEXT," + // 8: firstName
                "'FULL_NAME' TEXT," + // 9: fullName
                "'LOGIN_EMAIL' TEXT," + // 10: loginEmail
                "'PHONE' TEXT," + // 11: phone
                "'PROFILE_URL' TEXT," + // 12: profileURL
                "'SKILL' TEXT," + // 13: skill
                "'SKYPE_ID' TEXT," + // 14: skypeId
                "'TWITTER' TEXT," + // 15: twitter
                "'WEBSITE' TEXT," + // 16: website
                "'HOME_LOCATION_LATITUDE' REAL," + // 17: homeLocationLatitude
                "'HOME_LOCATION_LONGITUDE' REAL," + // 18: homeLocationLongitude
                "'LAST_LOCATION_LATITUDE' REAL," + // 19: lastLocationLatitude
                "'LAST_LOCATION_LONGITUDE' REAL," + // 20: lastLocationLongitude
                "'TEMP_GROUP_DATE' INTEGER," + // 21: tempGroupDate
                "'LATEST_GROUP_DATE' INTEGER," + // 22: latestGroupDate
                "'TOTAL_UNREAD_MESSAGES' INTEGER," + // 23: totalUnreadMessages
                "'LATEST_UNREAD_MESSAGES_DATE' INTEGER," + // 24: latestUnreadMessagesDate
                "'HOME_CHECK_IN_ID' TEXT," + // 25: homeCheckInId
                "'LAST_CHECK_IN_ID' TEXT);"); // 26: lastCheckInId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindLong(2, entity.getUpdatedAt().getTime());
 
        Boolean available = entity.getAvailable();
        if (available != null) {
            stmt.bindLong(3, available ? 1l: 0l);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(4, avatar);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(6, country);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String expertise = entity.getExpertise();
        if (expertise != null) {
            stmt.bindString(8, expertise);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(9, firstName);
        }
 
        String fullName = entity.getFullName();
        if (fullName != null) {
            stmt.bindString(10, fullName);
        }
 
        String loginEmail = entity.getLoginEmail();
        if (loginEmail != null) {
            stmt.bindString(11, loginEmail);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
 
        String profileURL = entity.getProfileURL();
        if (profileURL != null) {
            stmt.bindString(13, profileURL);
        }
 
        String skill = entity.getSkill();
        if (skill != null) {
            stmt.bindString(14, skill);
        }
 
        String skypeId = entity.getSkypeId();
        if (skypeId != null) {
            stmt.bindString(15, skypeId);
        }
 
        String twitter = entity.getTwitter();
        if (twitter != null) {
            stmt.bindString(16, twitter);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(17, website);
        }
 
        Double homeLocationLatitude = entity.getHomeLocationLatitude();
        if (homeLocationLatitude != null) {
            stmt.bindDouble(18, homeLocationLatitude);
        }
 
        Double homeLocationLongitude = entity.getHomeLocationLongitude();
        if (homeLocationLongitude != null) {
            stmt.bindDouble(19, homeLocationLongitude);
        }
 
        Double lastLocationLatitude = entity.getLastLocationLatitude();
        if (lastLocationLatitude != null) {
            stmt.bindDouble(20, lastLocationLatitude);
        }
 
        Double lastLocationLongitude = entity.getLastLocationLongitude();
        if (lastLocationLongitude != null) {
            stmt.bindDouble(21, lastLocationLongitude);
        }
 
        java.util.Date tempGroupDate = entity.getTempGroupDate();
        if (tempGroupDate != null) {
            stmt.bindLong(22, tempGroupDate.getTime());
        }
 
        java.util.Date latestGroupDate = entity.getLatestGroupDate();
        if (latestGroupDate != null) {
            stmt.bindLong(23, latestGroupDate.getTime());
        }
 
        Integer totalUnreadMessages = entity.getTotalUnreadMessages();
        if (totalUnreadMessages != null) {
            stmt.bindLong(24, totalUnreadMessages);
        }
 
        java.util.Date latestUnreadMessagesDate = entity.getLatestUnreadMessagesDate();
        if (latestUnreadMessagesDate != null) {
            stmt.bindLong(25, latestUnreadMessagesDate.getTime());
        }
 
        String homeCheckInId = entity.getHomeCheckInId();
        if (homeCheckInId != null) {
            stmt.bindString(26, homeCheckInId);
        }
 
        String lastCheckInId = entity.getLastCheckInId();
        if (lastCheckInId != null) {
            stmt.bindString(27, lastCheckInId);
        }
    }

    @Override
    protected void attachEntity(Member entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            new java.util.Date(cursor.getLong(offset + 1)), // updatedAt
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // available
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatar
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // expertise
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // firstName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fullName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // loginEmail
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // profileURL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // skill
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // skypeId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // twitter
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // website
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // homeLocationLatitude
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // homeLocationLongitude
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // lastLocationLatitude
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // lastLocationLongitude
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // tempGroupDate
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // latestGroupDate
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // totalUnreadMessages
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // latestUnreadMessagesDate
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // homeCheckInId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // lastCheckInId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setAvailable(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpertise(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFirstName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFullName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLoginEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProfileURL(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSkill(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSkypeId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTwitter(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWebsite(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHomeLocationLatitude(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setHomeLocationLongitude(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setLastLocationLatitude(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setLastLocationLongitude(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setTempGroupDate(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setLatestGroupDate(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setTotalUnreadMessages(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setLatestUnreadMessagesDate(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setHomeCheckInId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLastCheckInId(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Member entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Member entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLocationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getLocationDao().getAllColumns());
            builder.append(" FROM MEMBER T");
            builder.append(" LEFT JOIN LOCATION T0 ON T.'HOME_CHECK_IN_ID'=T0.'OBJECT_ID'");
            builder.append(" LEFT JOIN LOCATION T1 ON T.'LAST_CHECK_IN_ID'=T1.'OBJECT_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Member loadCurrentDeep(Cursor cursor, boolean lock) {
        Member entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Location homeCheckIn = loadCurrentOther(daoSession.getLocationDao(), cursor, offset);
        entity.setHomeCheckIn(homeCheckIn);
        offset += daoSession.getLocationDao().getAllColumns().length;

        Location lastCheckIn = loadCurrentOther(daoSession.getLocationDao(), cursor, offset);
        entity.setLastCheckIn(lastCheckIn);

        return entity;    
    }

    public Member loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Member> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Member> list = new ArrayList<Member>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Member> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Member> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
