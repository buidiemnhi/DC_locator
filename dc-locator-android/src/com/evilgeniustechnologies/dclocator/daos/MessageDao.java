package com.evilgeniustechnologies.dclocator.daos;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, String> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UpdatedAt = new Property(1, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
        public final static Property IsPrivate = new Property(3, Boolean.class, "isPrivate", false, "IS_PRIVATE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property OwnerId = new Property(6, String.class, "ownerId", false, "OWNER_ID");
        public final static Property GroupId = new Property(7, String.class, "groupId", false, "GROUP_ID");
        public final static Property UnreadGroupId = new Property(8, String.class, "unreadGroupId", false, "UNREAD_GROUP_ID");
    };

    private DaoSession daoSession;

    private Query<Message> messageGroup_UnreadMessagesQuery;

    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'UPDATED_AT' INTEGER NOT NULL ," + // 1: updatedAt
                "'FILE' TEXT," + // 2: file
                "'IS_PRIVATE' INTEGER," + // 3: isPrivate
                "'CONTENT' TEXT," + // 4: content
                "'TYPE' INTEGER," + // 5: type
                "'OWNER_ID' TEXT," + // 6: ownerId
                "'GROUP_ID' TEXT," + // 7: groupId
                "'UNREAD_GROUP_ID' TEXT);"); // 8: unreadGroupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
        stmt.bindLong(2, entity.getUpdatedAt().getTime());
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
 
        Boolean isPrivate = entity.getIsPrivate();
        if (isPrivate != null) {
            stmt.bindLong(4, isPrivate ? 1l: 0l);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(7, ownerId);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(8, groupId);
        }
 
        String unreadGroupId = entity.getUnreadGroupId();
        if (unreadGroupId != null) {
            stmt.bindString(9, unreadGroupId);
        }
    }

    @Override
    protected void attachEntity(Message entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            new java.util.Date(cursor.getLong(offset + 1)), // updatedAt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // file
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isPrivate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ownerId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // groupId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // unreadGroupId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUpdatedAt(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsPrivate(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setOwnerId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnreadGroupId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Message entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "unreadMessages" to-many relationship of MessageGroup. */
    public List<Message> _queryMessageGroup_UnreadMessages(String unreadGroupId) {
        synchronized (this) {
            if (messageGroup_UnreadMessagesQuery == null) {
                QueryBuilder<Message> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UnreadGroupId.eq(null));
                messageGroup_UnreadMessagesQuery = queryBuilder.build();
            }
        }
        Query<Message> query = messageGroup_UnreadMessagesQuery.forCurrentThread();
        query.setParameter(0, unreadGroupId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMemberDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getMessageGroupDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getMessageGroupDao().getAllColumns());
            builder.append(" FROM MESSAGE T");
            builder.append(" LEFT JOIN MEMBER T0 ON T.'OWNER_ID'=T0.'OBJECT_ID'");
            builder.append(" LEFT JOIN MESSAGE_GROUP T1 ON T.'GROUP_ID'=T1.'OBJECT_ID'");
            builder.append(" LEFT JOIN MESSAGE_GROUP T2 ON T.'UNREAD_GROUP_ID'=T2.'OBJECT_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Message loadCurrentDeep(Cursor cursor, boolean lock) {
        Message entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Member owner = loadCurrentOther(daoSession.getMemberDao(), cursor, offset);
        entity.setOwner(owner);
        offset += daoSession.getMemberDao().getAllColumns().length;

        MessageGroup group = loadCurrentOther(daoSession.getMessageGroupDao(), cursor, offset);
        entity.setGroup(group);
        offset += daoSession.getMessageGroupDao().getAllColumns().length;

        MessageGroup unreadGroup = loadCurrentOther(daoSession.getMessageGroupDao(), cursor, offset);
        entity.setUnreadGroup(unreadGroup);

        return entity;    
    }

    public Message loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Message> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Message> list = new ArrayList<Message>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Message> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Message> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
