package com.evilgeniustechnologies.dclocator.daos;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table ENTITY_CONNECTION.
 */
public class EntityConnection {

    private Long id;
    private String memberId;
    private String groupId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EntityConnectionDao myDao;

    private Member member;
    private String member__resolvedKey;

    private MessageGroup group;
    private String group__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public EntityConnection() {
    }

    public EntityConnection(Long id) {
        this.id = id;
    }

    public EntityConnection(Long id, String memberId, String groupId) {
        this.id = id;
        this.memberId = memberId;
        this.groupId = groupId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEntityConnectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public String getGroupId() {
        return groupId;
    }

    public void setGroupId(String groupId) {
        this.groupId = groupId;
    }

    /** To-one relationship, resolved on first access. */
    public Member getMember() {
        String __key = this.memberId;
        if (member__resolvedKey == null || member__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            Member memberNew = targetDao.load(__key);
            synchronized (this) {
                member = memberNew;
            	member__resolvedKey = __key;
            }
        }
        return member;
    }

    public void setMember(Member member) {
        synchronized (this) {
            this.member = member;
            memberId = member == null ? null : member.getObjectId();
            member__resolvedKey = memberId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public MessageGroup getGroup() {
        String __key = this.groupId;
        if (group__resolvedKey == null || group__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageGroupDao targetDao = daoSession.getMessageGroupDao();
            MessageGroup groupNew = targetDao.load(__key);
            synchronized (this) {
                group = groupNew;
            	group__resolvedKey = __key;
            }
        }
        return group;
    }

    public void setGroup(MessageGroup group) {
        synchronized (this) {
            this.group = group;
            groupId = group == null ? null : group.getObjectId();
            group__resolvedKey = groupId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String toString() {
        return "EntityConnection{" + '\n' +
                "id=" + id + '\n' +
                ", memberId='" + memberId + '\'' + '\n' +
                ", groupId='" + groupId + '\'' + '\n' +
                ", member__resolvedKey='" + member__resolvedKey + '\'' + '\n' +
                ", group__resolvedKey='" + group__resolvedKey + '\'' + '\n' +
                '}';
    }
    // KEEP METHODS END

}
